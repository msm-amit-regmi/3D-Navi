name: Deploy to AWS Server

on:
  workflow_run:
    workflows: ["Docker Build and Push"]
    types:
      - completed
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment: 3d navi
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up SSH
      env:
        AWS_SECRET_KEY: ${{ vars.AWS_SECRET_KEY }}
        AWS_SERVER_IP: ${{ vars.AWS_SERVER_IP }}
      run: |
        mkdir -p ~/.ssh
        echo "$AWS_SECRET_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H "$AWS_SERVER_IP" >> ~/.ssh/known_hosts
      
    - name: Deploy to AWS Server
      env:
        AWS_SERVER_IP: ${{ vars.AWS_SERVER_IP }}
      run: |
        ssh -i ~/.ssh/id_rsa ubuntu@"$AWS_SERVER_IP" << 'EOF'
          # Stop any running container
          docker stop 3d-navi-container || true
          docker rm 3d-navi-container || true
          
          # Pull the latest image
          docker pull ghcr.io/msm-amit-regmi/3d-navi:latest
          
          # Run the new container
          docker run -d \
            --name 3d-navi-container \
            -p 80:8000 \
            --restart unless-stopped \
            ghcr.io/msm-amit-regmi/3d-navi:latest
          
          # Verify the container is running
          docker ps | grep 3d-navi-container
        EOF
        
    - name: Verify Deployment
      env:
        AWS_SERVER_IP: ${{ vars.AWS_SERVER_IP }}
      run: |
        # Wait for the application to start
        sleep 10
        
        # Check if the application is accessible
        curl -s -o /dev/null -w "%{http_code}" http://"$AWS_SERVER_IP"/ | grep 200
        
        # Check the health endpoint
        response=$(curl -s http://"$AWS_SERVER_IP"/health)
        echo $response
        if [[ $response != *"healthy"* ]]; then
          echo "Health check failed"
          exit 1
        fi
        
        echo "Deployment successful! The application is running at http://$AWS_SERVER_IP/"