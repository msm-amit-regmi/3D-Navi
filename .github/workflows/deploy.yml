name: Deploy to AWS Server

on:
  workflow_run:
    workflows: ["Docker Build and Push"]
    types:
      - completed
    branches: [main]
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no application changes'
        required: false
        default: 'false'
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Run if either:
    # 1. The Docker build workflow completed successfully
    # 2. This workflow was manually triggered
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      github.event_name == 'workflow_dispatch'
    environment: 3d navi
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up SSH
      env:
        # Use environment variable for AWS_SECRET_KEY
        AWS_SECRET_KEY: ${{ vars.AWS_SECRET_KEY }}
        AWS_SERVER_IP: ${{ vars.AWS_SERVER_IP }}
      run: |
        mkdir -p ~/.ssh
        # Debug environment variables (masked for security)
        echo "AWS_SERVER_IP is set: $([[ -n "$AWS_SERVER_IP" ]] && echo "Yes" || echo "No")"
        echo "AWS_SECRET_KEY length: ${#AWS_SECRET_KEY}"
        
        # Check if AWS_SECRET_KEY is set
        if [ -z "$AWS_SECRET_KEY" ]; then
          echo "Error: AWS_SECRET_KEY is not set. Please add it as a variable in the GitHub environment."
          echo "Go to Settings > Environments > 3d navi > Add variable"
          echo "Name: AWS_SECRET_KEY"
          echo "Value: Your private SSH key for connecting to the AWS server"
          exit 1
        fi
        
        # Write the private key with proper line breaks
        # Try multiple approaches to handle different key formats
        echo "$AWS_SECRET_KEY" > ~/.ssh/id_rsa
        
        # If the key doesn't have proper line breaks, try to fix it
        if ! grep -q "BEGIN" ~/.ssh/id_rsa; then
          echo "Key format issue detected, trying to fix..."
          echo "$AWS_SECRET_KEY" | sed 's/\\n/\n/g' > ~/.ssh/id_rsa
        fi
        
        # Ensure the key has the right format
        if ! grep -q "BEGIN" ~/.ssh/id_rsa; then
          echo "Key still has format issues, trying base64 decode..."
          echo "$AWS_SECRET_KEY" | base64 -d > ~/.ssh/id_rsa 2>/dev/null || echo "Base64 decode failed"
        fi
        
        # Check if the key file is valid
        if ! grep -q "BEGIN" ~/.ssh/id_rsa; then
          echo "Error: SSH key is not in the correct format. Please check the AWS_SECRET_KEY value."
          echo "It should be a valid private key starting with '-----BEGIN RSA PRIVATE KEY-----' or similar."
          echo "Current key format (first 50 characters):"
          head -c 50 ~/.ssh/id_rsa
          exit 1
        fi
        
        # Set proper permissions
        chmod 600 ~/.ssh/id_rsa
        
        # Ensure AWS_SERVER_IP is not empty before using it
        if [ -z "$AWS_SERVER_IP" ]; then
          echo "Error: AWS_SERVER_IP is empty. Please add it as a variable in the GitHub environment."
          echo "Go to Settings > Environments > 3d navi > Add variable"
          echo "Name: AWS_SERVER_IP"
          echo "Value: Your AWS server IP address"
          exit 1
        fi
        
        # Add server to known hosts
        echo "Adding $AWS_SERVER_IP to known hosts..."
        ssh-keyscan -H "$AWS_SERVER_IP" >> ~/.ssh/known_hosts 2>/dev/null
        
        # Test SSH connection
        echo "Testing SSH connection..."
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa ubuntu@"$AWS_SERVER_IP" echo "SSH connection successful" || { 
          echo "SSH connection failed. Debugging information:"
          echo "1. Check if the AWS_SERVER_IP is correct: $AWS_SERVER_IP"
          echo "2. Check if the SSH key is valid:"
          head -n 2 ~/.ssh/id_rsa
          echo "..."
          tail -n 2 ~/.ssh/id_rsa
          echo "3. Check if the server is reachable:"
          ping -c 3 "$AWS_SERVER_IP" || echo "Server is not responding to ping"
          echo "4. Check if port 22 is open:"
          nc -zv "$AWS_SERVER_IP" 22 || echo "Port 22 is not open or reachable"
          exit 1
        }
      
    - name: Deploy to AWS Server
      env:
        AWS_SERVER_IP: ${{ vars.AWS_SERVER_IP }}
        AWS_SECRET_KEY: ${{ vars.AWS_SECRET_KEY }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Ensure AWS_SERVER_IP is not empty before using it
        if [ -z "$AWS_SERVER_IP" ]; then
          echo "Error: AWS_SERVER_IP is empty"
          exit 1
        fi
        
        # Add StrictHostKeyChecking=no to avoid host key verification issues
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa ubuntu@"$AWS_SERVER_IP" << 'EOSSH'
          set -e  # Exit immediately if a command exits with a non-zero status
          
          echo "Checking Docker status..."
          if ! command -v docker &> /dev/null; then
            echo "Docker is not installed. Installing Docker..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
          fi
          
          # Check if Docker is running
          if ! sudo systemctl is-active --quiet docker; then
            echo "Docker is not running. Starting Docker..."
            sudo systemctl start docker
          fi
          
          echo "Stopping any existing container..."
          sudo docker stop 3d-navi-container || true
          sudo docker rm 3d-navi-container || true
          
          echo "Logging in to GitHub Container Registry..."
          # We'll use anonymous pull since the image should be public
          
          echo "Checking if GitHub Container Registry is accessible..."
          curl -s -o /dev/null -w "%{http_code}\n" https://ghcr.io || {
            echo "Failed to access GitHub Container Registry. Checking internet connectivity..."
            ping -c 3 8.8.8.8 || echo "No internet connectivity"
            exit 1
          }
          
          echo "Pulling the latest image..."
          # Try multiple times with increasing timeouts
          MAX_PULL_RETRIES=3
          for i in $(seq 1 $MAX_PULL_RETRIES); do
            echo "Pull attempt $i of $MAX_PULL_RETRIES..."
            if sudo docker pull ghcr.io/msm-amit-regmi/3d-navi:latest; then
              echo "Image pulled successfully!"
              break
            elif [[ $i -eq $MAX_PULL_RETRIES ]]; then
              echo "Failed to pull image after $MAX_PULL_RETRIES attempts. Checking Docker logs..."
              sudo journalctl -u docker --no-pager -n 50
              echo "Checking Docker daemon status..."
              sudo systemctl status docker
              echo "Checking disk space..."
              df -h
              exit 1
            else
              echo "Retrying in $((i * 5)) seconds..."
              sleep $((i * 5))
            fi
          done
          
          echo "Running the new container..."
          sudo docker run -d \
            --name 3d-navi-container \
            -p 80:8000 \
            --restart unless-stopped \
            --health-cmd="curl -f http://localhost:8000/ || exit 1" \
            --health-interval=30s \
            --health-timeout=10s \
            --health-retries=3 \
            ghcr.io/msm-amit-regmi/3d-navi:latest
          
          echo "Verifying the container is running..."
          sudo docker ps | grep 3d-navi-container || { 
            echo "Container failed to start. Checking container logs..."
            sudo docker logs 3d-navi-container
            exit 1
          }
          
          echo "Checking container logs..."
          sudo docker logs 3d-navi-container
          
          echo "Deployment to server completed successfully"
        EOSSH
        
    - name: Verify Deployment
      env:
        AWS_SERVER_IP: ${{ vars.AWS_SERVER_IP }}
        AWS_SECRET_KEY: ${{ vars.AWS_SECRET_KEY }}
      run: |
        # Ensure AWS_SERVER_IP is not empty before using it
        if [ -z "$AWS_SERVER_IP" ]; then
          echo "Error: AWS_SERVER_IP is empty"
          exit 1
        fi
        
        echo "Waiting for the application to start..."
        # Wait longer to ensure the application is fully started
        sleep 30
        
        # Check container status on the server
        echo "Checking container status on the server..."
        ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa ubuntu@"$AWS_SERVER_IP" << 'EOSSH'
          sudo docker ps
          echo "Container logs:"
          sudo docker logs 3d-navi-container
        EOSSH
        
        echo "Checking if the application is accessible..."
        # Try multiple times with increasing delays
        MAX_RETRIES=5
        for i in $(seq 1 $MAX_RETRIES); do
          echo "Attempt $i of $MAX_RETRIES..."
          status_code=$(curl -s -o /dev/null -w "%{http_code}" http://"$AWS_SERVER_IP"/ || echo "Failed to connect")
          echo "HTTP status code: $status_code"
          
          if [[ "$status_code" == "200" ]]; then
            echo "Application is accessible!"
            break
          elif [[ $i -eq $MAX_RETRIES ]]; then
            echo "Error: Application is not accessible after $MAX_RETRIES attempts. Expected status code 200, got $status_code"
            
            # Check if the port is open
            echo "Checking if port 80 is open..."
            nc -zv "$AWS_SERVER_IP" 80 || echo "Port 80 is not open"
            
            # Check server status
            echo "Checking server status..."
            ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -i ~/.ssh/id_rsa ubuntu@"$AWS_SERVER_IP" << 'EOSSH'
              echo "System resources:"
              free -h
              df -h
              top -b -n 1 | head -n 20
              
              echo "Network status:"
              sudo netstat -tulpn | grep 80
              
              echo "Container status:"
              sudo docker ps -a
              sudo docker logs 3d-navi-container
            EOSSH
            
            exit 1
          else
            echo "Retrying in $((i * 5)) seconds..."
            sleep $((i * 5))
          fi
        done
        
        # Only check health endpoint if the main endpoint is accessible
        if [[ "$status_code" == "200" ]]; then
          echo "Checking the health endpoint..."
          response=$(curl -s http://"$AWS_SERVER_IP"/health || echo "Failed to connect")
          echo "Health response: $response"
          
          # If health endpoint doesn't exist or doesn't return "healthy", we'll log it but not fail
          # since the main application is running
          if [[ "$response" != *"healthy"* ]]; then
            echo "Warning: Health check didn't return 'healthy': $response"
            echo "This might be expected if the health endpoint is not implemented."
          else
            echo "Health check passed!"
          fi
        fi
        
        echo "Deployment verification completed! The application is running at http://$AWS_SERVER_IP/"